# Query: api.ts
# ContextLines: 1

import React, { useState } from "react";
import { resumeService } from "../services/resumeService"; // step 1

interface ResumeData {
  personalInfo: {
    name: string;
    email: string;
    phone: string;
  };
  workExperience?: string[];
  education?: string[];
  skills?: string[];
  targetJob: string;
}

const ResumeBuilder = () => {
  const [resumeData, setResumeData] = useState({
    personalInfo: {
      name: "",
      email: "",
      phone: "",
    },
    targetJob: "",
  });
  const [raw, setRaw] = useState("");
  const [aiGenerated, setAiGenerated] = useState<string>("");
  const [error, setError] = useState<string | null>(null);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    if (name === "name" || name === "email" || name === "phone") {
      setResumeData((prev) => ({
        ...prev,
        personalInfo: {
          ...prev.personalInfo,
          [name]: value,
        },
      }));
    } else if (name === "targetJob") {
      setResumeData((prev) => ({
        ...prev,
        targetJob: value,
      }));
    }
  };

  const handleGenerate = async () => {
    try {
      setError(null);
      // Use the data from state for personalInfo and targetJob
      const constructedResumeData: ResumeData = {
        personalInfo: {
          name: resumeData.personalInfo.name,
          email: resumeData.personalInfo.email,
          phone: resumeData.personalInfo.phone,
        },
        workExperience: [],
        education: [],
        skills: [],
        targetJob: resumeData.targetJob,
      };
      const result = await resumeService.generateResume("userId", constructedResumeData);
      setAiGenerated(result.text);
      setRaw(result.text);
    } catch (error) {
      console.error("Failed to generate AI resume", error);
      setError("Failed to generate AI resume. Please try again.");
    }
  };

  return (
    <div>
      <form
        onSubmit={(e) => {
          e.preventDefault();
          handleGenerate();
        }}
        style={{ marginBottom: "1em" }}
      >
        <div>
          <label>
            Name:
            <input
              type="text"
              name="name"
              value={resumeData.personalInfo.name}
              onChange={handleChange}
              style={{ marginLeft: 8, marginBottom: 8 }}
            />
          </label>
        </div>
        <div>
          <label>
            Email:
            <input
              type="email"
              name="email"
              value={resumeData.personalInfo.email}
              onChange={handleChange}
              style={{ marginLeft: 8, marginBottom: 8 }}
            />
          </label>
        </div>
        <div>
          <label>
            Phone:
            <input
              type="tel"
              name="phone"
              value={resumeData.personalInfo.phone}
              onChange={handleChange}
              style={{ marginLeft: 8, marginBottom: 8 }}
            />
          </label>
        </div>
        <div>
          <label>
            Target Job:
            <input
              type="text"
              name="targetJob"
              value={resumeData.targetJob}
              onChange={handleChange}
              style={{ marginLeft: 8, marginBottom: 8 }}
            />
          </label>
        </div>
        <button type="submit">Generate AI Resume</button>
      </form>
      {error && <div style={{ color: "red", marginBottom: "8px" }}>{error}</div>}
      <textarea
        value={aiGenerated || raw}
        onChange={(e) => setRaw(e.target.value)}
        style={{ width: "100%", minHeight: "200px" }}
      />
    </div>
  );
};

export default ResumeBuilder;
